###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.60.5.50814/W32 for MSP430       15/May/2014  04:06:23 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  32                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430                                                     #
#    Source file   =  C:\Documents and Settings\Nisrina                       #
#                     Rahmah\Desktop\Anaren AIR-ZNP FirmwareExamples          #
#                     v2070-20140306\ZM\zm_phy_spi.c                          #
#    Command line  =  "C:\Documents and Settings\Nisrina                      #
#                     Rahmah\Desktop\Anaren AIR-ZNP FirmwareExamples          #
#                     v2070-20140306\ZM\zm_phy_spi.c" -D LAUNCHPAD -D         #
#                     ZM_PHY_SPI -D REGION_NORTH_AMERICA -D                   #
#                     DISPLAY_NETWORK_INFORMATION -lc "C:\Documents and       #
#                     Settings\Nisrina Rahmah\Desktop\Anaren AIR-ZNP          #
#                     FirmwareExamples v2070-20140306\ZM                      #
#                     Examples\IAR\Launchpad\List\" -o "C:\Documents and      #
#                     Settings\Nisrina Rahmah\Desktop\Anaren AIR-ZNP          #
#                     FirmwareExamples v2070-20140306\ZM                      #
#                     Examples\IAR\Launchpad\Obj\" --no_cse --no_unroll       #
#                     --no_inline --no_code_motion --no_tbaa --debug          #
#                     -D__MSP430G2553__ -e --double=32 --dlib_config          #
#                     "C:\Program Files\IAR Systems\Embedded Workbench        #
#                     6.5\430\LIB\DLIB\dl430fn.h" -I "C:\Documents and        #
#                     Settings\Nisrina Rahmah\Desktop\Anaren AIR-ZNP          #
#                     FirmwareExamples v2070-20140306\ZM Examples\IAR\" -I    #
#                     "C:\Documents and Settings\Nisrina                      #
#                     Rahmah\Desktop\Anaren AIR-ZNP FirmwareExamples          #
#                     v2070-20140306\ZM Examples\IAR/..\" -I "C:\Documents    #
#                     and Settings\Nisrina Rahmah\Desktop\Anaren AIR-ZNP      #
#                     FirmwareExamples v2070-20140306\ZM                      #
#                     Examples\IAR/../ZM\" -I "C:\Documents and               #
#                     Settings\Nisrina Rahmah\Desktop\Anaren AIR-ZNP          #
#                     FirmwareExamples v2070-20140306\ZM                      #
#                     Examples\IAR/../HAL\" -I "C:\Documents and              #
#                     Settings\Nisrina Rahmah\Desktop\Anaren AIR-ZNP          #
#                     FirmwareExamples v2070-20140306\ZM                      #
#                     Examples\IAR/../Common\" -Ol                            #
#    List file     =  C:\Documents and Settings\Nisrina                       #
#                     Rahmah\Desktop\Anaren AIR-ZNP FirmwareExamples          #
#                     v2070-20140306\ZM Examples\IAR\Launchpad\List\zm_phy_sp #
#                     i.lst                                                   #
#    Object file   =  C:\Documents and Settings\Nisrina                       #
#                     Rahmah\Desktop\Anaren AIR-ZNP FirmwareExamples          #
#                     v2070-20140306\ZM Examples\IAR\Launchpad\Obj\zm_phy_spi #
#                     .r43                                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Documents and Settings\Nisrina Rahmah\Desktop\Anaren AIR-ZNP FirmwareExamples v2070-20140306\ZM\zm_phy_spi.c
      1          /**
      2          * @file zm_phy_spi.c
      3          *
      4          * @brief Physical Interface Layer to the Module using the Serial Peripheral Interface (SPI) port.
      5          * This file acts as an interface between the module library methods and the hardware (hal file).
      6          * 
      7          * @note To output SPI transmit information, define ZM_PHY_SPI_VERBOSE.
      8          * It is recommended to define this on a per-project basis. 
      9          * In IAR, this can be done in Project Options : C/C++ compiler : Preprocessor
     10          * In the defined symbols box, add:
     11          * ZM_PHY_SPI_VERBOSE
     12          *
     13          * Normally the module is quite fast in responding to a SREQ and there is not sufficient time on a 
     14          * slower processor (e.g. < 25MHz) to configure a timeout to detect a missing response. If using a 
     15          * fast processor then define FAST_PROCESSOR. This does several things:
     16          *   1. sendSreq() will timeout if a response was not received in time. 
     17          *   2. the amount of time spent in each part of the SREQ process is available in variables 
     18          *       timeFromChipSelectToSrdyLow and timeWaitingForSrsp.
     19          *
     20          * $Rev: 1642 $
     21          * $Author: dsmith $
     22          * $Date: 2012-10-31 11:17:04 -0700 (Wed, 31 Oct 2012) $
     23          *
     24          * @section support Support
     25          * Please refer to the wiki at www.anaren.com/air-wiki-zigbee for more information. Additional support
     26          * is available via email at the following addresses:
     27          * - Questions on how to use the product: AIR@anaren.com
     28          * - Feature requests, comments, and improvements:  featurerequests@teslacontrols.com
     29          * - Consulting engagements: sales@teslacontrols.com
     30          *
     31          * @section license License
     32          * Copyright (c) 2012 Tesla Controls. All rights reserved. This Software may only be used with an 
     33          * Anaren A2530E24AZ1, A2530E24CZ1, A2530R24AZ1, or A2530R24CZ1 module. Redistribution and use in 
     34          * source and binary forms, with or without modification, are subject to the Software License 
     35          * Agreement in the file "anaren_eula.txt"
     36          * 
     37          * YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE PROVIDED “AS IS” 
     38          * WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION, ANY 
     39          * WARRANTY OF MERCHANTABILITY, TITLE, NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO 
     40          * EVENT SHALL ANAREN MICROWAVE OR TESLA CONTROLS BE LIABLE OR OBLIGATED UNDER CONTRACT, NEGLIGENCE, 
     41          * STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER LEGAL EQUITABLE THEORY ANY DIRECT OR 
     42          * INDIRECT DAMAGES OR EXPENSE INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, 
     43          * PUNITIVE OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT OF SUBSTITUTE 
     44          * GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY 
     45          * DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     46          */
     47          
     48          #include "../HAL/hal.h"
     49          #include "zm_phy_spi.h"
     50          #include "module_errors.h"
     51          #include <stdint.h>
     52          
     53          
     54          /** This buffer will hold the transmitted messages and received SRSP Payload after sendMessage() was 
     55          called. If fragmentation support is not required then this can be smaller, e.g. 100B.*/
     56          uint8_t zmBuf[ZIGBEE_MODULE_BUFFER_SIZE];
     57          
     58          #ifdef FAST_PROCESSOR           //used to report the amount of time it takes for the Module to respond over SPI
     59          uint32_t timeFromChipSelectToSrdyLow = 0;
     60          uint32_t timeWaitingForSrsp = 0;
     61          //these will be used in sendSreq() for the timeouts:
     62          #define CHIP_SELECT_TO_SRDY_LOW_TIMEOUT (TICKS_PER_MS * 125)    
     63          #define WAIT_FOR_SRSP_TIMEOUT (TICKS_PER_MS * 125)              //typically takes less than 100mSec
     64          
     65          #endif
     66          
     67          /* Initializes the module PHY interface.
     68          */
     69          void zm_phy_init()
     70          {
     71            halSpiInitModule();
     72          }
     73          
     74          /** Whether the module has a message waiting to be retrieved.
     75           @return true (1) if there is a complete message ready for processing, or 0 otherwise.
     76          */
     77          uint8_t moduleHasMessageWaiting()
     78          {
     79            return (SRDY_IS_LOW());
     80          }
     81          
     82          /**
     83          Sends a Module Synchronous Request (SREQ) message and retrieves the response. A SREQ is a message to 
     84          the Module that is immediately followed by a Synchronous Response (SRSP) message from the Module. As 
     85          opposed to an Asynchronous Request (AREQ) message, which does not have a SRSP. This is a private 
     86          method that gets wrapped by sendMessage() and spiPoll().
     87          @pre Module has been initialized
     88          @pre zmBuf contains a properly formatted message. No validation is done.
     89          @post received data is written to zmBuf
     90          @return if FAST_PROCESSOR is defined then MODULE_SUCCESS, else an error code. If FAST_PROCESSOR is not defined, then MODULE_SUCCESS.
     91          */
     92          moduleResult_t sendSreq()
     93          {
     94          #ifdef FAST_PROCESSOR                           //NOTE: only enable if using a processor with sufficient speed (25MHz+)
     95            uint32_t timeLeft1 = CHIP_SELECT_TO_SRDY_LOW_TIMEOUT;
     96            uint32_t timeLeft2 = WAIT_FOR_SRSP_TIMEOUT;
     97            
     98            SPI_SS_SET();                               // Assert SS
     99            while (SRDY_IS_HIGH() && (timeLeft1 != 0))  //wait until SRDY goes low
    100              timeLeft1--;
    101            if (timeLeft1 == 0)                         //SRDY did not go low in time, so return an error
    102              return ZM_PHY_CHIP_SELECT_TIMEOUT;
    103            timeFromChipSelectToSrdyLow = (CHIP_SELECT_TO_SRDY_LOW_TIMEOUT - timeLeft1);
    104            
    105            spiWrite(zmBuf, (*zmBuf + 3));              // *bytes (first byte) is length after the first 3 bytes, all frames have at least the first 3 bytes
    106            *zmBuf = 0; *(zmBuf+1) = 0; *(zmBuf+2) = 0; //poll message is 0,0,0
    107            //NOTE: MRDY must remain asserted here, but can de-assert SS if the two signals are separate
    108            
    109            /* Now: Data was sent, so we wait for Synchronous Response (SRSP) to be received.
    110            This will be indicated by SRDY transitioning to high */
    111            
    112            while (SRDY_IS_LOW() && (timeLeft2 != 0))    //wait for data
    113              timeLeft2--;
    114            if (timeLeft2 == 0)
    115              return ZM_PHY_SRSP_TIMEOUT;
    116            
    117            timeWaitingForSrsp = (WAIT_FOR_SRSP_TIMEOUT - timeLeft2);
    118            //NOTE: if SS & MRDY are separate signals then can re-assert SS here.
    119            spiWrite(zmBuf, 3);
    120            if (*zmBuf > 0)                             // *bytes (first byte) contains number of bytes to receive
    121              spiWrite(zmBuf+3, *zmBuf);              //write-to-read: read data into buffer
    122            SPI_SS_CLEAR();
    123            return 0;
    124          #else                                           // In a slow processor there's not enough time to set up the timeout so there will be errors
    125            SPI_SS_SET();   
    126            while (SRDY_IS_HIGH()) ;                    //wait until SRDY goes low
    127            spiWrite(zmBuf, (*zmBuf + 3));              // *bytes (first byte) is length after the first 3 bytes, all frames have at least the first 3 bytes
    128            *zmBuf = 0; *(zmBuf+1) = 0; *(zmBuf+2) = 0; //poll message is 0,0,0
    129            //NOTE: MRDY must remain asserted here, but can de-assert SS if the two signals are separate
    130            
    131            //Now: Data was sent, wait for Synchronous Response (SRSP)
    132            while (SRDY_IS_LOW()) ;                     //wait for data
    133            //NOTE: if SS & MRDY are separate signals then can re-assert SS here.
    134            spiWrite(zmBuf, 3);
    135            if (*zmBuf > 0)                             // *bytes (first byte) contains number of bytes to receive
    136              spiWrite(zmBuf+3, *zmBuf);              //write-to-read: read data into buffer    
    137            SPI_SS_CLEAR();                             // re-assert MRDY and SS
    138            return MODULE_SUCCESS;  
    139          #endif
    140          }
    141          
    142          /**
    143          Polls the Module for data. This is used to receive data from the Module, for example when a message 
    144          has arrived. This will be initiated by detecting SRDY going low. 
    145          @pre Module has been initialized.
    146          @pre SRDY has gone low
    147          @post received data is written to zmBuf
    148          @note this method not required to be implemented when using UART interface.
    149          */
    150          //moduleResult_t spiPoll()
    151          moduleResult_t getMessage()
    152          {
    153            *zmBuf = 0; *(zmBuf+1) = 0; *(zmBuf+2) = 0;  //poll message is 0,0,0 
    154            return(sendSreq());
    155          }
    156          
    157          /** Public method to send messages to the Module. This will send one message and then receive the 
    158          Synchronous Response (SRSP) message from the Module to indicate the command was received.
    159          @pre zmBuf contains a properly formatted message
    160          @pre Module has been initialized
    161          @post buffer zmBuf contains the response (if any) from the Module. 
    162          */
    163          moduleResult_t sendMessage()
    164          {
    165          #ifdef ZM_PHY_SPI_VERBOSE    
    166            printf("Tx: ");
    167            printHexBytes(zmBuf, zmBuf[0] + 3);
    168          #endif    
    169            
    170            uint8_t expectedSrspCmdMsb = zmBuf[1] + SRSP_OFFSET;    //store these so we can compare with what is returned
    171            uint8_t expectedSrspCmdLsb = zmBuf[2];
    172            
    173            moduleResult_t result = sendSreq();                     //send message, buffer now holds received data
    174            
    175            if (result != MODULE_SUCCESS)                           //ERROR - sendSreq() timeout
    176            {
    177          #ifdef ZM_PHY_SPI_VERBOSE_ERRORS    
    178              printf("ERROR - sreq() timeout %02X\r\n", result);
    179          #endif 
    180              return result;
    181            }
    182            
    183            /* The correct SRSP will always be 0x4000 + cmd, or simpler 0x4000 | cmd
    184            For example, if the SREQ is 0x2605 then the corresponding SRSP is 0x6605 */
    185            if ((zmBuf[SRSP_CMD_MSB_FIELD] == expectedSrspCmdMsb) && (zmBuf[SRSP_CMD_LSB_FIELD] == expectedSrspCmdLsb))    //verify the correct SRSP was received
    186            {
    187              return MODULE_SUCCESS;
    188            } else {
    189          #ifdef ZM_PHY_SPI_VERBOSE_ERRORS    
    190              printf("ERROR - Wrong SRSP - received %02X-%02X, expected %02X-%02X\r\n", zmBuf[1], zmBuf[2],expectedSrspCmdMsb,expectedSrspCmdLsb);
    191          #endif          
    192              return ZM_PHY_INCORRECT_SRSP;   //Wrong SRSP received
    193            }
    194          }
    195          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      2   getMessage
        2   -> sendSreq
      2   moduleHasMessageWaiting
      6   sendMessage
        6   -> sendSreq
      2   sendSreq
        2   -> spiWrite
      2   zm_phy_init
        2   -> halSpiInitModule


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  P2IN
       1  P2OUT
      16  getMessage
      12  moduleHasMessageWaiting
      50  sendMessage
      88  sendSreq
     162  zmBuf
       4  zm_phy_init

 
 170 bytes in segment CODE
   2 bytes in segment DATA16_AN
 162 bytes in segment DATA16_Z
 
 170 bytes of CODE memory
 162 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
